using MediatR;
using Project.Module.ProjectPlus.Commands;
using Project.Module.ProjectPlus.Models;
using Project.ResponseHandler.ResponseBuilder;
using Project.ResponseHandler.ResponseModel;

namespace Project.Module.ProjectPlus.Handlers
{
    public class CreateProjectCommandHandler : IRequestHandler<CreateProjectCommand, ApiResponse>
    {
        private readonly IResponseBuilder _responseBuilder;

        public CreateProjectCommandHandler(IResponseBuilder responseBuilder)
        {
            _responseBuilder = responseBuilder;
        }

        public async Task<ApiResponse> Handle(CreateProjectCommand request, CancellationToken cancellationToken)
        {
            try
            {
                // TODO: Add your repository and actual data persistence logic here
                var project = new Project
                {
                    Id = 1, // This would normally be generated by the database
                    Name = request.Name,
                    Description = request.Description,
                    StartDate = request.StartDate,
                    EndDate = request.EndDate,
                    Status = request.Status,
                    Budget = request.Budget,
                    IsActive = request.IsActive
                };

                // Mock successful creation
                return await _responseBuilder.BuildSuccessResponse(
                    data: project,
                    message: "Project created successfully",
                    statusCode: 201
                );
            }
            catch (Exception ex)
            {
                return await _responseBuilder.BuildErrorResponse(
                    message: $"Error creating project: {ex.Message}",
                    statusCode: 500
                );
            }
        }
    }
} 